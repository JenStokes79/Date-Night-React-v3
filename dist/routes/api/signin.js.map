{"version":3,"sources":["../../../server/routes/api/signin.js"],"names":["User","require","UserSessions","module","exports","app","post","req","res","next","console","log","body","firstName","lastName","password","email","send","success","message","toLowerCase","find","err","previousUsers","length","newUser","generateHash","save","user","users","validPassword","userSessions","userId","_id","doc","token","get","query","isDeleted","sessions","findOneAndUpdate","$set"],"mappings":"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","file":"signin.js","sourcesContent":["const User = require(\"../../models/User\");\nconst UserSessions = require(\"../../models/UserSessions\");\n\nmodule.exports = app => {\n  app.post(\"/api/account/signup\", (req, res, next) => {\n    console.log('req.body', req.body);\n    const { body } = req;\n    const { firstName, lastName, password } = body;\n    let { email } = body;\n\n    if (!firstName) {\n      return res.send({\n        success: false,\n        message: \"Error: First name cannot be blank\"\n      });\n    }\n    if (!lastName) {\n      return res.send({\n        success: false,\n        message: \"Error: Last name cannot be blank\"\n      });\n    }\n\n    if (!email) {\n      return res.send({\n        success: false,\n        message: \"Error: email cannot be blank\"\n      });\n    }\n    if (!password) {\n      return res.send({\n        success: false,\n        message: \"Error: password cannot be blank\"\n      });\n    }\n\n    email = email.toLowerCase();\n\n    /*steps \n      1. verify email doesnt exist\n      2. save\n      */\n\n    User.find(\n      {\n        email: email\n      },\n      (err, previousUsers) => {\n        if (err) {\n          return res.send({\n            success: false,\n            message: \"Error: Server error1\"\n          });\n        } else if (previousUsers.length > 0) {\n          return res.send({\n            success: false,\n            message: \"Error: user already exists\"\n          });\n        }\n\n        const newUser = new User();\n\n        newUser.email = email;\n        newUser.firstName = firstName;\n        newUser.lastName = lastName;\n        newUser.password = newUser.generateHash(password);\n        newUser.save((err, user) => {\n          if (err) {\n            return res.send({\n              success: false,\n              message: \"Error: Server error2\"\n            });\n          }\n          console.log('successful add');\n          return res.send({\n            success: true,\n            message: \"Sign Up Successful!\",\n            user\n          });\n        });\n      }\n    );\n  });\n\n  app.post(\"/api/account/signin\", (req, res, next) => {\n    const { body } = req;\n    const { password } = body;\n    let { email } = body;\n\n    if (!email) {\n      return res.send({\n        success: false,\n        message: \"Error: email cannot be blank\"\n      });\n    }\n    if (!password) {\n      return res.send({\n        success: false,\n        message: \"Error: password cannot be blank\"\n      });\n    }\n\n    email = email.toLowerCase();\n\n    User.find(\n      {\n        email: email\n      },\n      (err, users) => {\n        if (err) {\n          return res.send({\n            success: false,\n            message: \"Error: Server error\"\n          });\n        }\n        if (users.length != 1) {\n          return res.send({\n            success: false,\n            message: \"Error: Invalid\"\n          });\n        }\n        const user = users[0];\n        if (!user.validPassword(password)) {\n          return res.send({\n            success: false,\n            message: \"Error: Invalid\"\n          });\n        }\n        // otherwise correct user\n\n        const userSessions = new UserSessions();\n        userSessions.userId = user._id;\n        userSessions.save((err, doc) => {\n          if (err) {\n            return res.send({\n              success: false,\n              message: \"Error: server error\"\n            });\n          }\n          return res.send({\n            success: true,\n            token: doc._id\n          });\n        });\n      }\n    );\n  });\n\n  // verify the token\n\n  app.get(\"/api/account/verify\", (req, res, next) => {\n    const { query } = req;\n    const { token } = query;\n    //?token = test\n\n    UserSessions.find(\n      {\n        _id: token,\n        isDeleted: false\n      },\n      (err, sessions) => {\n        if (err) {\n          return res.send({\n            success: false,\n            message: \"Error: server error\"\n          });\n        }\n        if (sessions.length != 1) {\n          return res.send({\n            success: false,\n            message: \"Error: Invalid\"\n          });\n        } else {\n          return res.send({\n            success: true,\n            message: \"Good\"\n          });\n        }\n      }\n    );\n  });\n\n  //log out\n  app.get(\"/api/account/logout\", (req, res, next) => {\n    const { query } = req;\n    const { token } = query;\n\n    UserSessions.findOneAndUpdate(\n      {\n        _id: token,\n        isDeleted: false\n      },\n      {\n        $set: { isDeleted: true }\n      },\n      null, (err, sessions) => {\n        if (err) {\n          return res.send({\n            success: false,\n            message: \"Error: server error\"\n          });\n        } else {\n        \n        return res.send({\n          success: true,\n          message: \"Logout Successful! Happy Dating!\"\n        });\n      }\n    }\n    );\n  });\n};\n"]}